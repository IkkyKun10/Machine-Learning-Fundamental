# -*- coding: utf-8 -*-
"""NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-ZpSW79F6cd3zc7Prm_g_2pCWLwYVCc8

Name: Riezki Maisyar
"""

from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

df = pd.read_csv('Question_Classification_Dataset.csv')
df = df.drop(columns=['Unnamed: 0', 'Category1', 'Category2'])
df

category = pd.get_dummies(df.Category0)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='Category0')
df_baru

tanya = df_baru['Questions'].values
label = df_baru[['ABBREVIATION', 'DESCRIPTION', 'ENTITY', 'HUMAN', 'LOCATION', 'NUMERIC']].values
label

tanya_latih, tanya_test, label_latih, label_test = train_test_split(tanya, label, test_size=0.2)

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(tanya_latih)
tokenizer.fit_on_texts(tanya_test)

sekuens_latih = tokenizer.texts_to_sequences(tanya_latih)
sekuens_test = tokenizer.texts_to_sequences(tanya_test)

padded_latih = pad_sequences(sekuens_latih)
padded_test = pad_sequences(sekuens_test)

ly = tf.keras.layers

model = tf.keras.models.Sequential([
                                    ly.Embedding(input_dim=5000, output_dim=16),
                                    ly.LSTM(64),
                                    ly.Dense(128, activation='relu'),
                                    ly.Dense(64, activation='relu'),
                                    ly.Dense(6, activation='softmax')
])
model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.97 and logs.get('val_accuracy') > 0.81):
      print('\n accuracy sudah mencapai 97% \n dan val_accuracy sudah mencapai 80%')
      self.model.stop_training = True

callbacks = myCallback()

num_epochs = 30
history = model.fit(
    padded_latih,
    label_latih,
    epochs=num_epochs,
    validation_data=(padded_test, label_test),
    verbose=2,
    callbacks=[callbacks]
)

fig, ax = plt.subplots(1, 2, figsize=(10, 4))

history_df = pd.DataFrame(history.history)
history_df[['accuracy', 'val_accuracy']].plot(kind='line', ax=ax[0])
history_df[['loss', 'val_loss']].plot(kind='line', ax=ax[1])